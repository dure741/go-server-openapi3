/*
 * 用户组管理API
 *
 * 这是一个对用户组进行创建、修改、检索、和删除的API
 *
 * API version: 3.11
 * Contact: huanghui@zdns.cn
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"fmt"
	"net/http"
	"strings"

	"github.com/getkin/kin-openapi/openapi3filter"
	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	//添加验证
	router.Use(openApiRulesValidation)
	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"UserGroupsGet",
		strings.ToUpper("Get"),
		"/user_groups",
		UserGroupsGet,
	},

	Route{
		"UserGroupsIdDelete",
		strings.ToUpper("Delete"),
		"/user_groups/{id}",
		UserGroupsIdDelete,
	},

	Route{
		"UserGroupsPost",
		strings.ToUpper("Post"),
		"/user_groups",
		UserGroupsPost,
	},
}

func openApiRulesValidation(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {

		fmt.Println("Start validate " + r.RequestURI)
		router := openapi3filter.NewRouter().WithSwaggerFromFile("./api/swagger.json")
		ctx := context.Background()
		route, pathParams, isempty := router.FindRoute(r.Method, r.URL)
		if isempty != nil {
			fmt.Println(isempty)
		}
		// Validate request
		requestValidationInput := &openapi3filter.RequestValidationInput{
			Request:    r,
			PathParams: pathParams,
			Route:      route,
		}
		if err := openapi3filter.ValidateRequest(ctx, requestValidationInput); err != nil {
			msg := "ValidateRequest: " + err.Error()
			fmt.Println(msg)
			http.Error(w, err.Error(), http.StatusBadRequest)
			return
		}
		next.ServeHTTP(w, r)
	})
}
